/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TgcapstoneAudioProcessor::TgcapstoneAudioProcessor() : delayBuffer(2,1)
{
    // Compressor
    compOnOff = false;
    gain = 0.0f;
    thresh = 0.0f;
    ratio = 2;
    rmsValueL = 0.0f;
    rmsValueR = 0.0f;
    
    // Delay
    delayOnOff = false;
    delayT = 0.0f;
    dryD = 0.0f;
    wetD = 0.0f;
    feedbackD = 0.0f;
    
    // Circular buffer
    delayReadPos = 0;
    delayWritePos = 0;
    delayBuffLength = 1;
}

TgcapstoneAudioProcessor::~TgcapstoneAudioProcessor()
{
}

//==============================================================================
const String TgcapstoneAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int TgcapstoneAudioProcessor::getNumParameters()
{
    // 3 parameters
    // gain, rmsL, rmsR
    return 3;
}

float TgcapstoneAudioProcessor::getParameter (int index)
{
    if (index == 0)
    {
        return gain;
    }
    else if (index == 1)
    {
        return rmsValueL;
    }
    else
    {
        return rmsValueR;
    }
}

void TgcapstoneAudioProcessor::setParameter (int index, float newValue)
{
    if (index == 0)
    {
        gain = newValue;
    }
    else if (index == 1)
    {
        rmsValueL = newValue;
    }
    else
    {
        rmsValueR = newValue;
    }
}

const String TgcapstoneAudioProcessor::getParameterName (int index)
{
    if (index == 0)
    {
        return "Gain";
    }
    else if (index == 1)
    {
        return "RMS Left";
    }
    else
    {
        return "RMS Right";
    }
}

const String TgcapstoneAudioProcessor::getParameterText (int index)
{
    if (index == 0)
    {
        return String(gain);
    }
    else if (index == 1)
    {
        return String(rmsValueL);
    }
    else
    {
        return String(rmsValueR);
    }
}

const String TgcapstoneAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String TgcapstoneAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool TgcapstoneAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool TgcapstoneAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool TgcapstoneAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool TgcapstoneAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool TgcapstoneAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double TgcapstoneAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int TgcapstoneAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int TgcapstoneAudioProcessor::getCurrentProgram()
{
    return 0;
}

void TgcapstoneAudioProcessor::setCurrentProgram (int index)
{
}

const String TgcapstoneAudioProcessor::getProgramName (int index)
{
    return String();
}

void TgcapstoneAudioProcessor::changeProgramName (int index, const String& newName)
{
}

void TgcapstoneAudioProcessor::reset()
{
    delayBuffer.clear();
}

//==============================================================================
void TgcapstoneAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Sizing the delay buffer to match the sample rate
    delayBuffLength = (int)(2 * sampleRate);
    
    if (delayBuffLength < 1)
        delayBuffLength = 1;
    
    delayBuffer.setSize(2, delayBuffLength);
    delayBuffer.clear();
    
    // Converting the delay position offset from seconds to samples
    delayReadPos = (int)(delayWritePos - (delayT * getSampleRate()) + delayBuffLength) % delayBuffLength;
}

void TgcapstoneAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void TgcapstoneAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // Information on the current block of samples
    const int numInputChannels = getNumInputChannels();
    const int numOutputChannels = getNumOutputChannels();
    const int numSamples = buffer.getNumSamples();
    
    if (compOnOff)
    {
        if (gain < thresh)
        {
            buffer.applyGain(gain);
        }
        else
        {
            buffer.applyGain(thresh);
        }
    }
    
    if (delayOnOff)
    {
        // Delay read and write pointers
        int channel, dpr, dpw;
        
        // Processing audio as stereo delay where processing is identical for both channels
        for (channel = 0; channel < numInputChannels; ++channel)
        {
            // contains audio of one channel
            float* currentSampleData = buffer.getSampleData(channel);
            // circular buffer for implementing delay on the channel
            float* currentDelayData = delayBuffer.getSampleData(jmin(channel, delayBuffer.getNumChannels() - 1));
            
            // temp copy of variables that need to be maintained between processBlock() calls
            dpr = delayReadPos;
            dpw = delayWritePos;
            
            for (int i = 0; i < numSamples; ++i)
            {
                const float in = currentSampleData[i];
                float out = 0.0;
                
                // weighting the current output for with the dry/wet parameters
                out = (dryD * in + wetD * currentDelayData[dpr]);
                
                // put current sample block in the delay buffer
                currentDelayData[dpw] = in + (currentDelayData[dpr] * feedbackD);
                
                if (++dpr >= delayBuffLength)
                    dpr = 0;
                if (++dpw >= delayBuffLength)
                    dpw = 0;
                
                // put output data in the buffer, replace the input
                currentSampleData[i] = out;
            }
        }
        
        // replace the temp copy of variables
        delayReadPos = dpr;
        delayWritePos = dpw;
    }
    
    rmsValueL = buffer.getRMSLevel(0, 0, buffer.getNumSamples());
    rmsValueR = buffer.getRMSLevel(1, 0, buffer.getNumSamples());
    
    setParameter(1, rmsValueL);
    
    
    
    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = numInputChannels; i < numOutputChannels; ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
    
}

//==============================================================================
bool TgcapstoneAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* TgcapstoneAudioProcessor::createEditor()
{
    return new TgcapstoneAudioProcessorEditor (*this);
}

//==============================================================================
void TgcapstoneAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void TgcapstoneAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TgcapstoneAudioProcessor();
}
